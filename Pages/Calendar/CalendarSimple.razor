@page "/calendar"

@using BlazorCalendar
@using BlazorCalendar.Models

@using EviCRM.Server.Calendar
@using EviCRM.Server.Core;

@using Majorsoft.Blazor.Components.Modal
@using Microsoft.AspNetCore.SignalR.Client

@inject AuthenticationStateProvider authStateProvider

@inject NavigationManager uriHelper;
@inject NavigationManager NavigationManager;

@inject IToastService _toastService

@inject Context _context;
@inject BackendController bc;
@inject SystemCore sc;
@inject Sentinel sentinel;

<PageTitle>Календарь</PageTitle>

<AuthorizeView>
      <Authorized>
          
<div class="d-flex flex-row mb-2">
	
	<select @bind="@SelectedView" class="me-2">
		<option value="@DisplayMode.year">Год</option>
		<option value="@DisplayMode.month" selected>Месяц</option>
		<option value="@DisplayMode.day">День</option>
	</select>

	<button type="button" @onclick="@(m => ClicMonthNavigate(-1))">◀️</button>  
	<input type="date" class="me-2" value="@(today.ToString("yyyy-MM-dd"))" @onchange="@(e => ChangeFirstDate(e.Value.ToString()))" />
	<button type="button" @onclick="@(m => ClicMonthNavigate(1))" class="me-2">▶️</button>

	@if (SelectedView == DisplayMode.year)
	{
		<label for="weeks_number">Перетаскивание</label>
		<input id="weeks_number" type="number" class="me-2" min="1" @bind-value="months">
	}

	<select @bind="@PriorityDisplay" class="me-2">
		<option value="@PriorityLabel.Code" selected>Метка</option>
		<option value="@PriorityLabel.Caption">Описание</option>
	</select>
	<div>
		<input type="checkbox" @bind="draggable" id="is-draggable" />
		<label for="is-draggable">Перетаскивание</label>
	</div>		 
</div>

@if (DialogOpen)
{
<CalendarTasks

isAdmin=@isAdmin 
operationType=@operationModal

schedule_model=@Calendar_Schedule

OnCreate=@CallbackCreateInterpreter
OnUpdate=@CallbackUpdateInterpeter 
OnDelete=@CallbackDeleteInterpreter 

ToastErrorShow=@ToastsNotifications_ShowCustomToast_Danger
OnClose="@OnDialogClose">

</CalendarTasks>
}

@if (SelectedView == DisplayMode.year || SelectedView == DisplayMode.month)
	{
<CalendarContainer FirstDate="today" TasksList="TasksList_Calendar_Array.ToArray()"  DisplayedView="getSelectedView()" >
	<AnnualView Months="months" Style="height:80vh"  
				PriorityDisplay="@PriorityDisplay"
				HeaderClick="HeaderClick"
				TaskClick="TaskClick" EmptyDayClick="EmptyDayClick"
				Draggable="@draggable" DragStart="DragStart" DropTask="DropTask" />

     <MonthlyView PriorityDisplay="@PriorityDisplay"
				OutsideCurrentMonthClick="OutsideCurrentMonthClick"
				TaskClick="TaskClick" DayClick="DayClick" 
				Draggable="@draggable" DragStart="DragStart" DropTask="DropTask" />
</CalendarContainer>


			<br />
		}
		else
		{
			<EviCRM.Server.Calendar.Index/>
		}
	</Authorized>
<NotAuthorized>
    <AuthorizationPrompt Title="Вам необходимо зарегистрироваться или войти! "/>
</NotAuthorized>
</AuthorizeView>  

	
@code{

	#region Toasts Notifications

	private string _toastText = $@"<strong>Toast:</strong> This is a(n) {NotificationTypes.Primary} notification";
	private bool _toastShowIcon = true;
	private bool _toastShowCloseButton = true;
	private bool _toastShowCountdownProgress = true;
	private uint _toastAutoCloseInSec = 5;
	private uint _toastShadowEffect = 5;
	private NotificationStyles _toastStyle;
	private NotificationTypes _toastTypeLevel;

	private ElementReference log1;
	private string _toastLog = "";

	private async Task ToastsNotifications_ShowCustomToast_Primary(string toastText)
	{
		await ToastsNotifications_ShowCustomToast(toastText, NotificationStyles.Normal, NotificationTypes.Primary);
	}
	private async Task ToastsNotifications_ShowCustomToast_Secondary(string toastText)
	{
		await ToastsNotifications_ShowCustomToast(toastText, NotificationStyles.Normal, NotificationTypes.Secondary);
	}
	private async Task ToastsNotifications_ShowCustomToast_Info(string toastText)
	{
		await ToastsNotifications_ShowCustomToast(toastText, NotificationStyles.Normal, NotificationTypes.Info);
	}
	private async Task ToastsNotifications_ShowCustomToast_Success(string toastText)
	{
		await ToastsNotifications_ShowCustomToast(toastText, NotificationStyles.Normal, NotificationTypes.Success);
	}
	private async Task ToastsNotifications_ShowCustomToast_Warning(string toastText)
	{
		await ToastsNotifications_ShowCustomToast(toastText, NotificationStyles.Normal, NotificationTypes.Warning);
	}
	private async Task ToastsNotifications_ShowCustomToast_Danger(string toastText)
	{
		await ToastsNotifications_ShowCustomToast(toastText, NotificationStyles.Normal, NotificationTypes.Danger);
	}
	private async Task ToastsNotifications_ShowCustomToast_Light(string toastText)
	{
		await ToastsNotifications_ShowCustomToast(toastText, NotificationStyles.Normal, NotificationTypes.Light);
	}
	private async Task ToastsNotifications_ShowCustomToast_Dark(string toastText)
	{
		await ToastsNotifications_ShowCustomToast(toastText, NotificationStyles.Normal, NotificationTypes.Dark);
	}

	private async Task ToastsNotifications_ShowCustomToast(string toastText, NotificationStyles ns, NotificationTypes ntype)
	{
		_lastToastId = _toastService.ShowToast(new ToastSettings()
            {
                Content = builder => builder.AddMarkupContent(0, toastText),
                NotificationStyle = ns,
                Type = ntype,
                AutoCloseInSec = _toastAutoCloseInSec,
                ShadowEffect = _toastShadowEffect,
                ShowCloseButton = _toastShowCloseButton,
                ShowCloseCountdownProgress = _toastShowCountdownProgress,
                ShowIcon = _toastShowIcon
            });
	}

	private async Task RemoveAllToasts()
	{
		_toastService.ClearAll();
	}
	private async Task RemoveLastToasts()
	{
		if (_lastToastId != Guid.Empty)
		{
			_toastService.RemoveToast(_lastToastId);
		}
	}
	private Guid _lastToastId;

	#endregion

	public string operationModal { get; set; }
	public string current_user { get; set; }

	public string modal_event_title { get; set; }
	public string modal_event_date_click { get; set; }
	public string modal_event_id { get; set; }

	#region Local Variables

	enum DisplayMode{day,month,year,} //Режим отображения календаря

	private DateTime today = DateTime.Today; //Сегодня
	private int months = 12; //Неделей в году
	private bool draggable = true; //Разрешить перетаскивание
	private string HeaderStyle = "cursor:pointer"; //Курсор мыши

	string user_ { get; set; }

	private BlazorCalendar.PriorityLabel PriorityDisplay = PriorityLabel.Code; //Код описания
	private DisplayMode SelectedView = DisplayMode.month;

	private List<schema_calendar_schedules> Calendar_SchedulesList;
	private schema_calendar_schedules Calendar_Schedule;
	private List<Tasks> TasksList_Calendar_Array = new();

	private schema_users User;

	public bool isAdmin { get; set; }	

	private string fakeConsole = "";

	public bool isNewHandler = true;
	public int modal_ID { get; set; }

	#endregion

	#region Modal System Operations
	public bool DialogOpen { get; set; }

	private void OnDialogClose(bool accepted)
	{
		DialogOpen = false;
		StateHasChanged();
	}

	private void OpenDialog()
	{
		DialogOpen = true;
		StateHasChanged();
	}
	#endregion

	#region Schedules Operations
	public async Task LoadScheludeData()
	{
		user_ = authStateProvider.GetAuthenticationStateAsync().Result.User.Identity.Name;

		if (user_ != null)
		{
			User = _context.User_Get(user_);

			//Проверка админки
			if (User.role == "admin" 
				|| User.role=="owner"
				|| User.role =="secretary")
			{
				isAdmin = true;
			}
			else
			{
				isAdmin = false;
			}

			Calendar_SchedulesList = _context.CalendarSchedules_Get(User.login);
		}
		else
		{
			//syslog
			//notify
			return;
		}

		foreach(var elem in Calendar_SchedulesList)
		{
			Tasks task = new();
			task = ScheduleGenerator(elem);
			TasksList_Calendar_Array.Add(task);
		}
		StateHasChanged();
	}
	#endregion

	 #region ALive

    private HubConnection hubConnection;

    private void CallLoadData()   
    { 
        string connection_string = "server = 82.146.44.138;user = mysql_c;password = 512Dcfbd28#;database=evicrm";
        
        var contextOptions = new DbContextOptionsBuilder<Context>()
    .UseMySql(connection_string, ServerVersion.AutoDetect(connection_string))
    .Options;

        using (var dbContext = new Context(contextOptions))
        {
       Calendar_SchedulesList = dbContext.CalendarSchedules_Get(User.login);
    }
        Task.Run(async () =>  
        {  
            await LoadData();  
        });  
    }  

    protected async Task LoadData()
    {
        await ToastsNotifications_ShowCustomToast_Info("Загрузила новые сведения в календарь");
    }  

    public bool IsConnected =>  
        hubConnection.State == HubConnectionState.Connected;  
  
   
    #endregion

 #region ALive


           
            #endregion

	DisplayedView getSelectedView()
	{
		switch(SelectedView)
		{
			case DisplayMode.year:
				return DisplayedView.Annual;
				break;

			default:
				return DisplayedView.Monthly;
				break;
		}
	}

	public BlazorCalendar.Models.Tasks ScheduleGenerator(schema_calendar_schedules sched)
	{
		BlazorCalendar.Models.Tasks schedule = new BlazorCalendar.Models.Tasks
		{
				ID = int.Parse(sched.id),
				DateStart = sched.startDate,
				DateEnd =  sched.endDate,
				Code = sched.Code,
				Color =  sched.Color,
				Caption =  sched.title,
				Comment =  sched.body,
				ForeColor =  sched.ForeColor,
				NotBeDraggable = false,
			};
		return schedule;
	}


	#region Service Section

	private void EmptyDayClick(ClickEmptyDayParameter clickEmptyDayParameter)
	{
		fakeConsole = "Empty day :" + clickEmptyDayParameter.Day.ToShortDateString();
	}

	private void DragStart(DragDropParameter dragDropParameter)
	{	 
		fakeConsole = $"DragStart event :{dragDropParameter.Day.ToShortDateString()} {dragDropParameter.taskID}";
	}  

	private void DropTask(DragDropParameter dragDropParameter)
	{													 
		fakeConsole = $"DropTask event :{dragDropParameter.Day.ToShortDateString()} {dragDropParameter.taskID}";

		BlazorCalendar.Models.Tasks taskDropped = TasksList_Calendar_Array.FirstOrDefault(t => t.ID == dragDropParameter.taskID);

		var TotalDay = (taskDropped.DateEnd - taskDropped.DateStart).TotalDays;
		taskDropped.DateEnd = dragDropParameter.Day.AddDays(TotalDay);
		taskDropped.DateStart = dragDropParameter.Day;
	}

	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			new Timer(DateTimeCallback, null, TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(1));
		}
	}

	private void DateTimeCallback(object state)
	{
		InvokeAsync(() => StateHasChanged());
	}

	private void ChangeFirstDate(string value)
	{
		if (string.IsNullOrEmpty(value)) return;
		today = DateTime.Parse(value.ToString());
	}

	private void ClicMonthNavigate(int monthToAdd)
	{
		today = today.AddMonths(monthToAdd);
	}

	private void HeaderClick(DateTime month)
	{
		SelectedView = DisplayMode.month;
		fakeConsole = "HeaderClick :" + month.ToString("MMM yyyy");
	}
	private void OutsideCurrentMonthClick(int MonthAdded)
	{
		today = today.AddMonths(MonthAdded);
	}

	#endregion

}