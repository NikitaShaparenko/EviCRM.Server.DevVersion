@page "/marks_chart"

@using Majorsoft.Blazor.Extensions.BrowserStorage
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client

@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

@inject IServiceScopeFactory serviceScopeFactory

@inject Context _context
@inject BackendController bc
@inject SystemCore sc
@inject Sentinel sentinel
@inject LiveNature liven

@inject NavigationManager UriHelper

@inject IWebHostEnvironment _env
@inject ILocalStorageService _localStorageService
@inject ISessionStorageService _sessionStorageService

@inject SignInManager<IdentityUser> SignInManager
@inject AuthenticationStateProvider authStateProvider

@inject NavigationManager NavigationManager  

@inject IToastService _toastService


<style>
    select {
        width: 150px; /* Ширина списка в пикселах */
    }
</style>

<h5>Дневник</h5>
<PageTitle>Дневник</PageTitle>

<AuthorizeView>
    <Authorized>

        <style>
            .button_transparent {
                background-color: Transparent;
                background-repeat: no-repeat;
                border: none;
                cursor: pointer;
                overflow: hidden;
                outline: none;
            }
        </style>

        <div class="input-daterange input-group">

            <select class="form-select-lg" id="ddm_month" @bind="global_month">
                <option value="1">Январь</option>
                <option value="2">Февраль</option>
                <option value="3">Март</option>
                <option value="4">Апрель</option>
                <option value="5">Май</option>
                <option value="6">Июнь</option>
                <option value="7">Июль</option>
                <option value="8">Август</option>
                <option value="9">Сентябрь</option>
                <option value="10">Октябрь</option>
                <option value="11">Ноябрь</option>
                <option value="12">Декабрь</option>
            </select>

            <p></p>

            <select name="ddm_year" class="form-select-lg" id="ddm_year" @bind="global_year">
                <option value="2022">2022</option>
                <option value="2023">2023</option>
                <option value="2024">2024</option>
                <option value="2025">2025</option>
                <option value="2026">2026</option>
                <option value="2027">2027</option>
                <option value="2028">2028</option>
                <option value="2029">2029</option>
                <option value="2030">2030</option>
            </select>

        </div>

        <p></p>

        @if (ready)
        {
            <div class="card">

                <div class="card-body">
                    <h4 class="card-title mb-4">Журнал оценок</h4>
                    <div class="table-responsive">
                        <table class="table table-bordered table-nowrap align-middle mb-0">

                            <thead class="table-light">
                                <tr>
                                    <th scope="col" style="width: 70px;">#</th>
                                    <th scope="col">Имя сотрудника</th>

                                    @foreach (int days in days_num)
                                    {
                                        <th scope="col">@(days+1) (@WhatIsTheDayToday(days+1))</th>
                                    }

                                </tr>
                            </thead>

                            <tbody>

                                @{
                                    int i = -1;
                                }

                                @foreach (var user in schs_users)
                                {
                                    i++;
                                    var temp = i;

                                    if (isAdmin || (!isAdmin && user.login == user_))
                                    {
                                        <tr>
                                            <td>
                                                @if (isAdmin || (!isAdmin && user.login == user_))
                                                {
                                                    @(i+1)
                                                }
                                                else
                                                {
                                                    <h5>1</h5>
                                                }
                                            </td>
                                            <td>@user.fullname</td>

                                            @foreach (int days in days_num)
                                            {
                                                debug_var = getUserMarkByIDAndDay(user, days + 1);
                                                if (getUserMarkByIDAndDay(user, days + 1) == "")
                                                {
                                                    <td>
                                                        <button @onclick="() => ShowInfo(user,days+1,true)" class="button_transparent" style="color:white">
                                                            <b><i>0 / 0</i></b>
                                                        </button>
                                                    </td>
                                                }
                                                else
                                                {
                                                    <td>
                                                        <button @onclick="() => ShowInfo(user,days+1,false)" class="button_transparent" style="color:red">
                                                            <b><i>@getUserMarkByIDAndDay(user,days+1)</i></b>
                                                        </button>
                                                    </td>
                                                }
                                            }


                                        </tr>
                                    }
                                }
                            </tbody>

                            @if (schs_users.Count == 0)
                            {
                                <h5 class="text-truncate font-size-14 m-0">
                                    <a href="javascript: void(0);" class="text-dark">К сожалению, в списке нет пользователей</a>
                               </h5>
                            }

                        </table>
                    </div>
                </div>
            </div>

        }
        else
        {
            <h5><i class="bx bx-buoy bx-spin text-primary display-3"></i> Загружаю дневник, ожидайте пожалуйста... </h5>
        }
        @if (DeleteDialogOpen)
        {
            <MarksChartModal 

            mcm=@mcm 
            operationType=@modal_operationType 
            user_fullname=@modal_Name

            OnCreate=@CreateMarkInterpreter 
            OnClose=@OnDeleteDialogClose
            OnDelete=@DeleteInterpreter 
            OnUpdate=@UpdateInterpreter 
            
            user_model=@user_model

            />

        }

    </Authorized>

    <NotAuthorized>
        <AuthorizationPrompt Title="Вам необходимо зарегистрироваться или войти! " />
    </NotAuthorized>

</AuthorizeView>

@code{

}


@code{
     //Toasts:

    #region Toasts Notifications

     //Toast Notifications
        private string _toastText = $@"<strong>Toast:</strong> This is a(n) {NotificationTypes.Primary} notification";
	    private bool _toastShowIcon = true;
	    private bool _toastShowCloseButton = true;
	    private bool _toastShowCountdownProgress = true;
	    private uint _toastAutoCloseInSec = 5;
	    private uint _toastShadowEffect = 5;
	    private NotificationStyles _toastStyle;
	    private NotificationTypes _toastTypeLevel;

    //Toasts
    private async Task ToastsNotifications_ShowAllToast()
    {
        foreach (var item in Enum.GetValues<NotificationTypes>())
        {
            _toastService.ShowToast($@"<strong>Toast оповещения:</strong> Это оповещение типа {item}", item);
        }
    }

    private Guid _lastToastId;

    private async Task ToastsNotifications_ShowCustomToast(string toastText, NotificationStyles ns, NotificationTypes ntype)
    {
        _lastToastId = _toastService.ShowToast(new ToastSettings()
            {
                Content = builder => builder.AddMarkupContent(0, toastText),
                NotificationStyle = ns,
                Type = ntype,
                AutoCloseInSec = _toastAutoCloseInSec,
                ShadowEffect = _toastShadowEffect,
                ShowCloseButton = _toastShowCloseButton,
                ShowCloseCountdownProgress = _toastShowCountdownProgress,
                ShowIcon = _toastShowIcon
            });
    }

    private async Task ToastsNotifications_ShowCustomToast_Primary(string toastText)
    {
        await ToastsNotifications_ShowCustomToast(toastText, NotificationStyles.Normal, NotificationTypes.Primary);
    }
    private async Task ToastsNotifications_ShowCustomToast_Secondary(string toastText)
    {
        await ToastsNotifications_ShowCustomToast(toastText, NotificationStyles.Normal, NotificationTypes.Secondary);
    }
    private async Task ToastsNotifications_ShowCustomToast_Info(string toastText)
    {
        await ToastsNotifications_ShowCustomToast(toastText, NotificationStyles.Normal, NotificationTypes.Info);
    }
    private async Task ToastsNotifications_ShowCustomToast_Success(string toastText)
    {
        await ToastsNotifications_ShowCustomToast(toastText, NotificationStyles.Normal, NotificationTypes.Success);
    }
    private async Task ToastsNotifications_ShowCustomToast_Warning(string toastText)
    {
        await ToastsNotifications_ShowCustomToast(toastText, NotificationStyles.Normal, NotificationTypes.Warning);
    }
    private async Task ToastsNotifications_ShowCustomToast_Danger(string toastText)
    {
        await ToastsNotifications_ShowCustomToast(toastText, NotificationStyles.Normal, NotificationTypes.Danger);
    }
    private async Task ToastsNotifications_ShowCustomToast_Light(string toastText)
    {
        await ToastsNotifications_ShowCustomToast(toastText, NotificationStyles.Normal, NotificationTypes.Light);
    }
    private async Task ToastsNotifications_ShowCustomToast_Dark(string toastText)
    {
        await ToastsNotifications_ShowCustomToast(toastText, NotificationStyles.Normal, NotificationTypes.Dark);
    }
    private async Task RemoveAllToasts()
    {
        _toastService.ClearAll();
    }
    private async Task RemoveLastToasts()
    {
        if (_lastToastId != Guid.Empty)
        {
            _toastService.RemoveToast(_lastToastId);
        }
    }
    #endregion
}

@code{

    #region ALive

    private HubConnection hubConnection;


    private void CallLoadData()   
    { 
        string connection_string = "server = 82.146.44.138;user = mysql_c;password = 512Dcfbd28#;database=evicrm";
        
        var contextOptions = new DbContextOptionsBuilder<Context>()
    .UseMySql(connection_string, ServerVersion.AutoDetect(connection_string))
    .Options;

        using (var dbContext = new Context(contextOptions))
        {
        if (isAdmin)
                {
                    schs_marks = dbContext.Marks_Get();
                    schs_users = dbContext.Users_Get();
                }
                else
                {
                    schs_marks = dbContext.Marks_Get(user_);
                    schs_users = dbContext.Users_Get();
                }
    }
        Task.Run(async () =>  
        {  
            await LoadData();  
        });  
    }  

    protected async Task LoadData()
    {
        await ToastsNotifications_ShowCustomToast_Info("Загрузила новые сведения в дневнике!");
    }  

    public bool IsConnected =>  
        hubConnection.State == HubConnectionState.Connected;  
  
   
    #endregion
}

@code {

    List<int> days_num = new List<int>();


    //Entity Framework БД
    private List<schema_marks> schs_marks = new List<schema_marks>();
    private List<schema_users> schs_users = new List<schema_users>();

    //Модули


    public int num { get; set; }

    int day_num { get; set; } //Сколько дней в месяце

    bool ready = false;

    public string modal_operationType { get; set; }

    public schema_marks mcm {get;set;}

    public DateTime modal_Date { get; set; }

    public int modal_ID { get; set; }

    public string modal_Name { get; set; }


    public DateTime _global_month { get; set; }

    public DateTime _global_year { get; set; }

    List<string> month = new List<string>(new string[] { "Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь" });
    List<string> years = new List<string>(new string[] { "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030", "2031", "2032", "2033" });

    string debug_var { get; set; }
    string user_ { get; set; }
    string current_month { get; set; }
    string current_year { get; set; }

    bool isAdmin { get; set; }
    public bool DeleteDialogOpen { get; set; }

    int modal_id = 0;

    schema_users user_model { get; set; }
}

@functions {

    #region Modal Operations

    private void OnDeleteDialogClose(bool accepted)
    {
        DeleteDialogOpen = false;
        StateHasChanged();

    }

    private void OpenDeleteDialog()
    {
        DeleteDialogOpen = true;
        StateHasChanged();
    }

    #endregion

    #region Variable Operation

    public string global_month
    {
        get => _global_month.Month.ToString();
        set
        {
            _global_month = CreateCustomMonth(_global_month, int.Parse(value));
            day_num = DateTime.DaysInMonth(_global_year.Year, _global_month.Month);
            DayCounter();
        }
    }

    public string global_year
    {
        get => _global_year.Year.ToString();
        set
        {
            _global_year = CreateCustomYear(_global_year, int.Parse(value));
            day_num = DateTime.DaysInMonth(_global_year.Year, _global_month.Month);
            DayCounter();
        }
    }
    #endregion


    #region System Vars
    public static DateTime CreateCustomMonth(DateTime time, int month)
    {
        return new DateTime(time.Year, month, time.Day, time.Hour, time.Minute, 0);
    }
    public static DateTime CreateCustomYear(DateTime time, int year)
    {
        return new DateTime(year, time.Month, time.Day, time.Hour, time.Minute, 0);
    }

    string WhatIsTheDayToday(int current_day)
    {
        DateTime dt = new DateTime(_global_year.Year, _global_month.Month, current_day);
        switch (dt.DayOfWeek)
        {
            case DayOfWeek.Monday:
                {
                    return "Пн";
                }
            case DayOfWeek.Tuesday:
                {
                    return "Вт";
                }
            case DayOfWeek.Wednesday:
                {
                    return "Ср";
                }
            case DayOfWeek.Thursday:
                {
                    return "Чт";
                }
            case DayOfWeek.Friday:
                {
                    return "Пт";
                }
            case DayOfWeek.Saturday:
                {
                    return "Сб";
                }
            case DayOfWeek.Sunday:
                {
                    return "Вс";
                }
        }
        return "??";
    }

    void DayCounter()
    {
        days_num.Clear();
        for (int i = 0; i < day_num; i++)
        {
            days_num.Add(i);
            StateHasChanged();
        }
    }
    #endregion


    #region OnAfterRender & DateTimeCallback
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            new Timer(DateTimeCallback, null, TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(1));
        }
    }
    private void DateTimeCallback(object state)
    {
        InvokeAsync(() => StateHasChanged());
    }
    #endregion


    public string sql_getUserFullnameByID(int ID)
    {
        var elem = schs_users.FirstOrDefault(p => p.id == ID);

        if (elem != null)
        {
            return elem.fullname;
        }
        return null;
    }

    public schema_marks sql_getMarkByUserAndDate(schema_users User, DateTime dt)
    {
        var elem = schs_marks.FirstOrDefault(p=>
            p.user_id == User.id 
            && p.date == dt);

        if (elem != null)
        {
            return new();
        }
        return elem;
}

 public string getUserMarkByIDAndDay(schema_users User, int Day)
        {
            string view = "";

            DateTime dtp = new DateTime();
            DateTime dtp2 = new DateTime();

            dtp2 = new DateTime(_global_year.Year, _global_month.Month, Day); //Выбор даты

            for (int j = 0; j < schs_marks.Count; j++)
            {
                dtp = schs_marks[j].date;

                //Проверка на совпадение даты
                if (dtp.ToShortDateString() == dtp2.ToShortDateString())
                {
                    if (User.id == schs_marks[j].user_id)
                    {
                        if (schs_marks[j].isTwoMarks)
                        {
                            view = schs_marks[j].first_mark.ToString() + " / " + schs_marks[j].second_mark.ToString();
                        }
                        else
                        {
                            view = schs_marks[j].first_mark.ToString();
                        }
                    }
                }

            }
            return view;
        }
}