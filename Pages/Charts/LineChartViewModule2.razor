@using Blazorise.Charts 
@using EviCRM.Server.Core
@using EviCRM.Server.Pages.Charts
@page "/chart_interop_line_fullscreen"
@inject NavigationManager UriHelper
@inject IWebHostEnvironment _env

@inject IJSRuntime JSRuntime

@*<LineChart @ref="lineChart2" TItem="WatcherEvent2" Options="@lineChartOptions" />*@
<LineChart @ref="lineChart2" TItem="WatcherEvent2" Options="@chartExternalOptions" />

@code{
    private LineChart<WatcherEvent2> lineChart2;
    MipkoIntegrator mi = new MipkoIntegrator();
    MipkoIntegratorCore mic = new MipkoIntegratorCore();


    [Parameter]
    public List<string> thinclient_dt { get; set; }

    [Parameter]
    public LineChartDataset<WatcherEvent> data { get; set; }

    [Parameter]
    public List<LineChartDataset<WatcherEvent>> lst_data { get; set; }

    [Parameter]
    public DateTime dt_datereview { get; set; }

    [Parameter]
    public int max { get; set; }

    [Parameter]
    public LineChartOptions chartExternalOptions { get; set; }

    private List<string> backgroundColors = new() { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
    private List<string> borderColors = new() { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };

    LineChartOptions lineChartOptions = new()
        {
            Locale = "ru",
            Plugins = new ChartPlugins
            {
                Legend = new ChartLegend
                {
                    Display = false,
                }
            },


            Parsing = new ChartParsing
            {
                XAxisKey = "sector",
                YAxisKey = "count",
            },



            Scales = new ChartScales
            {

                X = new ChartAxis
                {

                    Type = "time",
                    Time = new ChartAxisTime
                    {
                        DisplayFormat = new ChartAxisTimeDisplayFormat
                        {
                          Second = "HH:mm:ss",
                          Minute= "HH:mm",
                          Hour= "HH",
                        },
                    },
                    
                },
                Y = new ChartAxis
                {
                    Min = 0,
                    Max = 5,
                    Ticks = new ChartAxisTicks
                    {
                        StepSize = 0.5,
                    }
                },
                
            },
        };

    bool isAlreadyInitialized = false;
}



@functions{

    List<LineChartDataset<WatcherEvent2>> data_series_collection = new List<LineChartDataset<WatcherEvent2>>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (!isAlreadyInitialized)
        {

            //  await JSRuntime.InvokeAsync<string>("moment.locale('ru');");
            if (lst_data != null)
            {
                foreach (var elem in lst_data)
                {
                    List<WatcherEvent> lst_we = elem.Data;
                    List<WatcherEvent2> lst_we2 = new List<WatcherEvent2>();

                    foreach (var lst_we_elem in lst_we)
                    {
                        DateTime dt_elem = new DateTime();
                        string str_elem = "";

                        str_elem = lst_we_elem.Sector;
                        dt_elem = DateTime.ParseExact(str_elem, "HH:mm",null);
                        Console.WriteLine("DT Elem: " + dt_elem.ToShortTimeString());


                        dt_elem = new DateTime(dt_datereview.Year, dt_datereview.Month, dt_datereview.Day, dt_elem.Hour, dt_elem.Minute, 0);
                        WatcherEvent2 we2 = new WatcherEvent2();
                        we2.Sector = dt_elem;
                        we2.Count = lst_we_elem.Count;

                        lst_we2.Add(we2);
                    }

                    LineChartDataset<WatcherEvent2> lcd_we_new = new LineChartDataset<WatcherEvent2>();

                    lcd_we_new.Label = elem.Label;
                        lcd_we_new.Data = lst_we2;
                        lcd_we_new.BackgroundColor = elem.BackgroundColor; // line chart can only have one color
                        lcd_we_new.BorderColor = borderColors[1];
                        lcd_we_new.Fill = true;
                        lcd_we_new.PointRadius = 1.0f;
                        lcd_we_new.BorderWidth = 0;
                        lcd_we_new.PointBorderColor = Enumerable.Repeat(borderColors.First(), 6).ToList();
                        lcd_we_new.CubicInterpolationMode = "monotone";

                    //str_elem = 00:00

                      data_series_collection.Add(lcd_we_new);
                   

                    await lineChart2.AddDataSet(lcd_we_new);
                }
            }

           isAlreadyInitialized = true;
            StateHasChanged();
        }
    }

    public void ReloadElement()
    {
        UriHelper.NavigateTo("/chart_chartinterop_line", true);
        StateHasChanged();
    }

        public string genPathToThinClientStatsByUserID(int user_array_id,DateTime dt_n)
    {
        string str = "";

        if (Directory.Exists(Path.Combine(_env.WebRootPath,"thinclient")))
        {

        }
        else
        {
            Directory.CreateDirectory(Path.Combine(_env.WebRootPath, "thinclient"));
        }

        string thinc = thinclient_dt[user_array_id];

        bool isFirstServer = true;

        if (thinc.Contains("rendev_"))
        {
            isFirstServer = true;
            thinc = thinc.Replace("rendev_", "");
        }
        else
        {
            isFirstServer = false;
            thinc = thinc.Replace("renovationdev_", "");
        }

        string path_base = Path.Combine(_env.WebRootPath, "thinclient");
        string full_path = path_base;

        if (thinc != "")
        {

            if (isFirstServer)
            {
                string day_str = dt_n.Day.ToString();
                string month_str = dt_n.Month.ToString();
                string year_str = dt_n.Year.ToString();

                if (day_str.Length < 2)
                {
                    day_str = "0" + dt_n.Day;
                }

                if (month_str.Length < 2)
                {
                    month_str = "0" + dt_n.Month;
                }

                if (year_str.Length < 2)
                {
                    year_str = "0" + dt_n.Year;
                }



                full_path = Path.Combine(_env.WebRootPath, "thinclient", "RENDEV",thinc,(day_str + "-" + month_str + "-" + year_str)  + ".csv");

            }
            else
            {

                string day_str = dt_n.Day.ToString();
                string month_str = dt_n.Month.ToString();
                string year_str = dt_n.Year.ToString();

                if (day_str.Length < 2)
                {
                    day_str = "0" + dt_n.Day;
                }

                if (month_str.Length < 2)
                {
                    month_str = "0" + dt_n.Month;
                }

                if (year_str.Length < 2)
                {
                    year_str = "0" + dt_n.Year;
                }

                full_path = Path.Combine(_env.WebRootPath, "thinclient", "RENOVATIONDEV",thinc,(day_str + "-" + month_str + "-" + year_str)  + ".csv");
            }

            if (File.Exists(full_path))
            {
                str = full_path;
            }
        }
        return str;
    }

    public string getUserDataByIDAndDay(int i, DateTime dt_ud)
    {
        string a_str = "";

        //i - user array id
        //days - number of days in month

        string log_path = genPathToThinClientStatsByUserID(i,dt_ud);

        if ((log_path) != "")
        {
            TerminalServer_AnalyzeMethodActivityModel tsamam = mi.AnalyzeMethodActivityByDate(log_path, dt_ud);

            if (tsamam.tsamaam_start.Year != 1)
            {

                string str_h = tsamam.tsamaam_time.ToString(@"hh");
                string str_m = tsamam.tsamaam_time.ToString(@"mm");
                //string str_s = tsamam.tsamaam_time.ToString(@"ss\:fff");

                a_str += tsamam.tsamaam_start.ToShortTimeString() + " / ";
                a_str += tsamam.tsamaam_end.ToShortTimeString();
                a_str += "(" + str_h + " ч " + str_m + " мин)";
            }
        }

        return a_str;
    }
}