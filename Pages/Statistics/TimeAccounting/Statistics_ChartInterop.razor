@page "/stats_chartinterop"
@using Blazorise.Charts
@using EviCRM.Server.Core
@using EviCRM.Server.Pages.Charts
@using EviCRM.Server.Pages.Statistics
@inject NavigationManager UriHelper
@inject IWebHostEnvironment _env

 <LineChart @ref="lineChart" TItem="WatcherEvent" Options="@lineChartOptions" />

@code {
    MipkoIntegrator mi = new MipkoIntegrator();
    MipkoIntegratorCore mic = new MipkoIntegratorCore();
    MySQL_Controller mysqlc = new MySQL_Controller();

    List<string> thinclient_dt = new List<string>();

    [Parameter]
    public List<LineChartDataset<WatcherEvent>> lcd_list { get; set; }

    

    private List<string> backgroundColors = new() { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
    private List<string> borderColors = new() { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };

    private LineChart<WatcherEvent> lineChart;

    LineChartOptions lineChartOptions = new()
        {
            Parsing = new ChartParsing
            {
                XAxisKey = "sector",
                YAxisKey = "count",
            }
        };

    bool isAlreadyInitialized = false;

    


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!isAlreadyInitialized)
        {
            isAlreadyInitialized = true;
            await lineChart.Clear();
            await lineChart.AddDataSet(GetSystemLineChartDataset());

            for (int i = 0; i<lcd_list.Count;i++)
            {
                await lineChart.AddDataSet(lcd_list[i]);
            }


        }
    }

    public void ReloadElement()
    {
        UriHelper.NavigateTo("/stats_chartinterop", true);
        StateHasChanged();
    }

    private LineChartDataset<WatcherEvent> GetSystemLineChartDataset()
    {
        List<WatcherEvent> Data_ch = new List<WatcherEvent>();


        for (int h = 0; h < 24; h++)
        {
            for (int m = 0; m < 60; m++)
            {
                WatcherEvent we = new WatcherEvent { Sector = h + ":" + m, Count = 0 };
                Data_ch.Add(we);
            }
        }

        return new()
            {
                Label = "Ось времени",
                Data = Data_ch,
                BackgroundColor = backgroundColors[0], // line chart can only have one color
                BorderColor = borderColors[0],
                Fill = true,
                PointRadius = 3,
                BorderWidth = 1,
                PointBorderColor = Enumerable.Repeat(borderColors.First(), 6).ToList(),
                CubicInterpolationMode = "monotone",
            };
    }

    protected override async Task OnInitializedAsync()
    {
         thinclient_dt = await mysqlc.getListUsersThinClientAsync();
    }
   
 }