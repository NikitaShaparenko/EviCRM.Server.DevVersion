@inject Context _context
@inject BackendController bc

@using EviCRM.Server.ViewModels

<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Отменить выполнение задачи</h4>
                <button type="button" class="close" @onclick="@ModalCancel">&times;</button>
            </div>

            <div class="modal-body">
         <div class="form-group row mb-4">
        <label for="ttm_question_title">Почему вы хотите отказать выполнять задачу?</label>
             
        <div class="list-group">
             <button type="button" @onclick='(() => SendTOScriptCmd("REFUSE_NOTME"))' class="list-group-item list-group-item-action">Эта задача со мной не связана</button>
             <button type="button"@onclick='(() => SendTOScriptCmd("REFUSE_IMPOSSIBLE"))' class="list-group-item list-group-item-action">Считаю её невозможной</button>
             <button type="button" @onclick='(() => SendTOScriptCmd("REFUSE_NOWAY"))' class="list-group-item list-group-item-action">Не согласен с условиями выполнения задачи</button>>
        </div>
    </div>
            </div>
            <div class="modal-footer">
               <button type="button" class="btn btn-danger waves-effect" data-bs-dismiss="modal">Отказываюсь выполнять задачу</button>
               <button type="button" class="btn" @onclick="@ModalCancel">Отмена</button>             
            </div>
        </div>
    </div>
</div>

@code{
    [Parameter]
    public schema_tasks Current_Task { get; set; }

     [Parameter]
    public List<schema_users> Users { get; set; }

    [Parameter]
    public List<schema_divisions> Divisions { get; set; }

}

@code {
    [Parameter]
    public string task_id { get; set; }

    [Parameter]
    public string task_author { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

      public string getUsernameByLogin(string login)
    {
        string fullname = "";

        var elem = Users.FirstOrDefault(p => p.login == login);

        if (elem != null)
        {
            fullname = elem.fullname;
        }
        return fullname;
    }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }

    private Task ModalOk()
    {
        return OnClose.InvokeAsync(true);
    }

    public async Task SendTOScriptCmd(string cmd)
    {
        EviCRM.Server.ViewModels.TaskTrackingModelRefuse ttmr = new TaskTrackingModelRefuse();
        ttmr.task_author = task_author;
        ttmr.task_id = task_id;
        ttmr.toscript_cmd = cmd;
        string TOSCRIPT_CMD = "REFUSE";

        string task_author_to =  ttmr.task_author;
        string task_id_to = ttmr.task_id;

        string TOSCRIPT_VAR1 = ttmr.toscript_cmd;
        string TOSCRIPT_VAR2 = "";

        schema_task_tracking_main sttm = new()
            {
                task_variable1 = TOSCRIPT_VAR1,
                task_variable2 = TOSCRIPT_VAR2,
                task_variable3 = "",
                task_author = task_author_to,
                task_id = task_id_to,
                task_cmd = TOSCRIPT_CMD,
                task_datetime = DateTime.Now,
            };

        _context.TaskTrackingMain_Create(sttm);

        string push_msg = "[Задача - " +  Current_Task.task_name + "] \n";
        push_msg += "(Пользователь: " + getUsernameByLogin(task_author_to) + ") \n \n";
        push_msg += "Пользователь отказался выполнять задачу: \n";

        switch(ttmr.toscript_cmd)
        {
            case "REFUSE_NOTME":
                push_msg += "По причине: со мной никак не связана";
                break;

            case "REFUSE_IMPOSSIBLE":
                push_msg += "По причине: считаю её невозможной";
                break;

            case "REFUSE_NOWAY":
                push_msg += "По причине: не согласен с условиями выполнения";
                break;

        }
        
        await  bc.SendTelegramMessage(push_msg,Current_Task,Users,Divisions);
        await OnClose.InvokeAsync(true);
    }
}
