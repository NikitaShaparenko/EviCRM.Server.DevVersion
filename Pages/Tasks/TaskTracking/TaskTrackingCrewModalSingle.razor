@inject IWebHostEnvironment _env;
@using EviCRM.Server.Core;
@using Microsoft.AspNetCore.Components

@*<style>

     .wordwrap { 
    word-wrap: break-word; /* Перенос слов */ 
   }

.container {
    border: 1px solid #000000;
    height: 300px;
}

.container textarea{
    border: 1px solid red;
    height: 100%;
}

    /* Important part */
.modal-dialog{
    overflow-y: initial !important
}
.modal-body{
    max-height: calc(100vh - 200px);
    overflow-y: auto;
}
</style>*@

<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Состав команды исполнителей</h4>
                <button type="button" class="close" @onclick="@ModalCancel">&times;</button>
            </div>
            <div class="modal-body">
                <div class="table-responsive">
                    <table class="table table-nowrap align-middle mb-0">

                        <thead class="table-light">
                            <tr>
                                <th scope="col">#</th>
                                <th scope="col"></th>
                                <th scope="col">ФИО пользователя</th>
                            </tr>
                        </thead>
                        <tbody>
                            

                                @for (int i = 0; i < users_dt.Count; i++)
                                {
                                    int temp = i;
                                    <tr>
                                    
                                   
                                    @*<td>@(i+1)</td>*@
                                    <td>
                                        @if (choosen_checkbox == getArrayIDByUserName(users_dt[i]))
                                        {
                                            <input class="form-check-input" type="checkbox" checked="checked" id="ttm_cardmark_selected_@i" name="ttm_cardmark_selected_@i" @onchange="eventArgs => { CheckboxClicked(temp, eventArgs.Value); }" />
                                        }
                                        else
                                        {
                                           <input class="form-check-input" type="checkbox" id="ttm_cardmark_selected_@i" name="ttm_cardmark_selected_@i" @onchange="eventArgs => { CheckboxClicked(temp, eventArgs.Value); }" />
                                    
                                        }
                                    </td>
                                    <td>
                                         
                                        @if (System.IO.File.Exists(Path.Combine(_env.WebRootPath, "\\users\\avatars", users_avatars[i])) == false)

                                        {
                                       
                                            <div class="avatar-xs">
                                                <span class="avatar-title rounded-circle">
                                                        @{
                                                            string str = fullname_dt[i].ToUpper();
                                                            char b_str = '?';
                                                            if (str.Length > 0)
                                                            {
                                                                b_str = str[0];
                                                            }
                                                            @b_str
                                                        }
                                                </span>
                                            </div>
                                        
                                        }
                                        else
                                        {
                                        <div>
                                            <img class="rounded-circle avatar-xs" src=@("/users/avatars/" + users_avatars[i]) alt="Ава">
                                        </div>
                                        }
                                        </td>

                                 
                               

                                <td>
                                    @fullname_dt[i]
                                </td>
                                </tr>
                                 }
                            
                        </tbody>
                    </table>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn" @onclick="@ModalCancel">Закрыть</button>
                    <button type="button" class="btn btn-success" @onclick=@ModalOk>Сохранить выбранных</button>
                </div>
            </div>
        </div>
    </div>
    </div>
@code {

    [Parameter]
    public List<string> users_dt { get; set; }

    [Parameter]
    public List<string> users_avatars { get; set; }

    [Parameter]
    public List<string> fullname_dt { get; set; }

    [Parameter]
    public List<int> selected_task_ids { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter]
    public EventCallback<int> OnChoosen { get; set; }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }


    protected override void OnInitialized()
    {
        //selected_task_ids
        //choosen_checkbox.Add()
        choosen_checkbox = 0;
    }

    public int getArrayIDByUserName(string input)
    {
        for (int ap = 0; ap<users_dt.Count;ap++)
        {
            if (users_dt[ap] == input)
            {
                return ap;   
            }
        }
        return 0;
    }

    void CheckboxClicked(int ID, object checkedValue)
    {
        if ((bool)checkedValue) //Если нажата, то 
        {
            choosen_checkbox = ID;
            StateHasChanged();
        }
    }

        public async void SaveCheckingCardmark(int ID)
        {
           
            //

           
            StateHasChanged();
        }


        private Task ModalOk()
        {
            OnChoosen.InvokeAsync(choosen_checkbox);
            return OnClose.InvokeAsync(true);
        }

       }
